<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on chance tao</title>
    <link>https://chancetao.com/posts/</link>
    <description>Recent content in Posts on chance tao</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 31 May 2022 13:49:14 +0800</lastBuildDate><atom:link href="https://chancetao.com/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>如何创建一个博客？</title>
      <link>https://chancetao.com/posts/how-to-build-a-blog/</link>
      <pubDate>Tue, 31 May 2022 13:49:14 +0800</pubDate>
      
      <guid>https://chancetao.com/posts/how-to-build-a-blog/</guid>
      <description>最近重新整理了博客，记录一下搭建的过程。
使用 Hugo 创建站点 参考 Hugo的官方文档，按部就班地创建一个静态网站并且部署到 Github Page。完成之后通过 https://\&amp;lt;name\&amp;gt;.github.io 可以正常访问博客了。
我使用的 Hugo 主题是 Diary。这个主题优雅又简洁，并且支持了数学公式插入、样式配置和黑暗模式等等功能。
不过这里先不开始配置。因为很多配置是和域名相关的，所以为了避免后期想要修改域名的时候积重难返，先来配置自定义域名。
自定义域名 因为国内众所周知的域名 censorship，所以我在 chemicloud 上买了想要的域名。再通过 dnspod 配置好 DNS 解析规则。
上传 CNAME 到仓库之后等待 DNS 验证成功，就可以通过 https 访问自定义域名了。
主题配置 接下来参考Diary&amp;rsquo;s wiki 来自定义一些主题配置。
这里我接入了 disqus 评论和 Google Analysis 分析工具，并且添加了 LaTeX 支持。
i18n TODO</description>
    </item>
    
    <item>
      <title>动态规划与背包问题</title>
      <link>https://chancetao.com/posts/dynamic-programming-and-knapsack-problems/</link>
      <pubDate>Tue, 15 Jun 2021 17:58:48 +0800</pubDate>
      
      <guid>https://chancetao.com/posts/dynamic-programming-and-knapsack-problems/</guid>
      <description>动态规划与背包问题 LeetCode 2021.6.6-2021.6.12 每日一题
动态规划 动态规划（Dynamic Programming，简称DP）是一种通过把原问题分解为相对简单的子问题的方式求解复杂问题的方法。通常用来求解最优化问题。
大致上，若要解一个给定问题，我们需要解其不同部分（即子问题），再根据子问题的解以得出原问题的解。
一旦某个给定子问题的解已经算出，则将其记忆化存储，以便下次需要同一个子问题解之时直接查表。
通常按照以下4个步骤来设计一个动态规划算法：
 刻画一个最优解的结构特征。 递归地定义最优解的值。 计算最优解的值，通常采用自底向上的方法。 采用计算出的信息构造一个最优解。  如果仅仅需要最优解的值，第4步可以忽略。
以求解斐波那契数列第 $n$ 项为例，采用递归求解 $Fib(6)$ 时有以下递归调用树：
而使用动态规划求解同一个问题：
背包问题 01背包问题 问题：有 $N$ 物品和一个容量为 $V$ 的背包。第 $i$ 件物品的重量是 $w_i$ ， 价值是 $v_i$ ，每个物品只有一件。求解将哪些物品装入背包可使价值总和最大。
定义一个数组 $dp$，$ dp[i][j],\ (1 \le i \le N,\ )$表示前 $i$ 种物品在背包容量为 $j$ 的时候最优解的值。
对于 $ dp[i][j]$ 来说
 如果容量 $j$ 小于当前物品的重量，那么就不能选择第 $i$ 个物品了，此时有$dp[i][j] = dp[i-1][j]$； 如果容量 $j$ 大于等于当前物品的重量，那么可以选择第 $i$ 个物品。此时有 $dp[i][j] = max(dp[i - 1][j],\ dp[i - 1][j - v[i]] + v[i])$ ；  得到状态转移方程： $$ dp[i][j] = \begin{cases} dp[i - 1][j], &amp;amp; \text{ j $\lt$ v[i]} \\ max(dp[i - 1][j],\ dp[i - 1][j - v[i]] + v[i]) &amp;amp; \text { j $\ge$ v[i]} \end{cases} $$</description>
    </item>
    
  </channel>
</rss>
